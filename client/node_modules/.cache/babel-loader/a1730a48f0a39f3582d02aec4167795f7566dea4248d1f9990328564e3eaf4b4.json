{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav/code/Cuvette/to-do-app copy/client/src/Context/AppContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AppDataContext = /*#__PURE__*/createContext();\nconst AppContext = ({\n  children\n}) => {\n  _s();\n  // get request states\n  const [groups, setGroups] = useState(null);\n  // post request states\n  const [form, setform] = useState({\n    name: \"\",\n    color: \"#ffffff\"\n  });\n  //about notes\n  const [notes, setNotes] = useState([]);\n  //loading state for notes\n  const [loading, setloading] = useState(false);\n  //error state for notes\n  const [error, setError] = useState(null);\n  const [noteForm, setNoteForm] = useState({\n    groupId: \"\",\n    content: \"\"\n  });\n\n  // choose selcted group\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const selectGroup = group => {\n    setSelectedGroup(group);\n  };\n  //all group names\n  const getGroups = async () => {\n    const allGroups = await axios.get(\"http://localhost:4000/api/group\");\n    const data = allGroups.data;\n    setGroups(data);\n  };\n  useEffect(() => {\n    getGroups();\n  }, []);\n\n  //All notes\n  const fetchNotes = useCallback(async groupId => {\n    if (!groupId) {\n      setNotes([]);\n      return;\n    }\n    setloading(true);\n    setError(null);\n    try {\n      // Fetch notes for the selected group\n      const response = await axios.get(`http://localhost:4000/api/note/group/${groupId}`);\n      const data = response.data;\n      setNotes(data);\n    } catch (error) {\n      console.log(\"Error fetching notes\", error);\n      setError(\"Failed to fetch notes\");\n      setNotes([]);\n    } finally {\n      // Set loading to false after API call completes\n      setLoading(false);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppDataContext.Provider, {\n      value: {\n        groups,\n        setGroups,\n        form,\n        setform,\n        notes,\n        setNotes,\n        noteForm,\n        setNoteForm,\n        selectedGroup,\n        setSelectedGroup,\n        getGroups,\n        selectGroup\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(AppContext, \"O+Ai3eNmaHl37mur0bPPImjzTlw=\");\n_c = AppContext;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppContext\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppDataContext","AppContext","children","_s","groups","setGroups","form","setform","name","color","notes","setNotes","loading","setloading","error","setError","noteForm","setNoteForm","groupId","content","selectedGroup","setSelectedGroup","selectGroup","group","getGroups","allGroups","get","data","fetchNotes","response","console","log","setLoading","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gaurav/code/Cuvette/to-do-app copy/client/src/Context/AppContext.js"],"sourcesContent":["import {createContext, useState,useEffect,useCallback } from \"react\"\nimport axios from 'axios';\nexport const AppDataContext = createContext()\n\n\n\nconst AppContext = ({ children }) => {\n    // get request states\n    const [groups, setGroups] = useState(null);\n    // post request states\n    const [form, setform] = useState({\n        name: \"\",\n        color: \"#ffffff\"\n    });\n    //about notes\n    const [notes, setNotes] = useState([]);\n    //loading state for notes\n    const [loading,setloading] = useState(false);\n    //error state for notes\n    const [error,setError] = useState(null)\n    const [noteForm, setNoteForm] = useState({\n    groupId: \"\",\n    content: \"\"\n  });\n\n\n\n\n\n\n\n\n    // choose selcted group\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const selectGroup = (group) => {\n        setSelectedGroup(group);\n    };\n    //all group names\n    const getGroups = async () => {\n            const allGroups = await axios.get(\"http://localhost:4000/api/group\")\n            const data = allGroups.data\n            setGroups(data)\n        }\n        useEffect(() => {\n        getGroups();\n    }, []);\n\n\n\n\n\n\n    //All notes\n    const fetchNotes = useCallback(async (groupId) => {\n        if (!groupId) {\n            setNotes([])\n            return;\n        }\n        setloading(true);\n        setError(null);\n\n        try {\n            // Fetch notes for the selected group\n            const response = await axios.get(`http://localhost:4000/api/note/group/${groupId}`)\n            const data = response.data\n            setNotes(data)\n        } catch (error) {\n            console.log(\"Error fetching notes\", error);\n            setError(\"Failed to fetch notes\")\n            setNotes([]);\n        } finally {\n            // Set loading to false after API call completes\n            setLoading(false)\n        }\n\n    },[])\n   \n\n\n\n\n    \n    \n    return (\n        <>\n            <AppDataContext.Provider value={{\n                groups,\n                setGroups,\n                form,\n                setform,\n                notes,\n                setNotes,\n                noteForm,\n                setNoteForm,\n                selectedGroup,\n                setSelectedGroup,\n                getGroups,\n                selectGroup,\n                \n            }}>\n                {\n                    children\n                }\n            </AppDataContext.Provider>\n\n        </>\n    )\n}\n\nexport default AppContext"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}