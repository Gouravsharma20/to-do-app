{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav/code/Cuvette/to-do-app copy/client/src/Context/AppContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AppDataContext = /*#__PURE__*/createContext();\nconst AppContext = ({\n  children\n}) => {\n  _s();\n  const [loading, setloading] = useState(false);\n  // get request states\n  const [groups, setGroups] = useState(null);\n  // post request states\n  const [form, setform] = useState({\n    name: \"\",\n    color: \"#ffffff\"\n  });\n  const [notes, setNotes] = useState([]);\n  const [noteForm, setNoteForm] = useState({\n    groupId: \"\",\n    content: \"\"\n  });\n  // choose selcted group\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const selectGroup = group => {\n    setSelectedGroup(group);\n  };\n  //all group names\n  const getGroups = async () => {\n    const allGroups = await axios.get(\"http://localhost:4000/api/group\");\n    const data = allGroups.data;\n    setGroups(data);\n  };\n  useEffect(() => {\n    getGroups();\n  }, []);\n  //All notes\n  const fetchNotes = useCallback(async () => {\n    if (!selectedGroup || !selectedGroup._id) {\n      setNotes([]);\n      return;\n    }\n    setloading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`http://localhost:4000/api/note/group/${selectedGroup._id}`);\n      const data = response.data;\n      setNotes(data);\n    } catch (error) {\n      console.log(\"Error fetching notes\", error);\n      setError(\"Failed to fetch notes\");\n      setNotes([]);\n    } finally {\n      setloading(false);\n    }\n  }, [selectedGroup]);\n  useEffect(() => {\n    fetchNotes();\n  }, [fetchNotes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppDataContext.Provider, {\n      value: {\n        groups,\n        setGroups,\n        form,\n        setform,\n        notes,\n        setNotes,\n        noteForm,\n        setNoteForm,\n        selectedGroup,\n        setSelectedGroup,\n        getGroups,\n        selectGroup,\n        fetchNotes,\n        loading,\n        error\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(AppContext, \"q6em+OZOrormjLxiD7kW2XD+T64=\");\n_c = AppContext;\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppContext\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AppDataContext","AppContext","children","_s","loading","setloading","groups","setGroups","form","setform","name","color","notes","setNotes","noteForm","setNoteForm","groupId","content","selectedGroup","setSelectedGroup","selectGroup","group","getGroups","allGroups","get","data","fetchNotes","_id","setError","response","error","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gaurav/code/Cuvette/to-do-app copy/client/src/Context/AppContext.js"],"sourcesContent":["import {createContext, useState,useEffect,useCallback } from \"react\"\nimport axios from 'axios';\nexport const AppDataContext = createContext()\n\n\n\nconst AppContext = ({ children }) => {\n    const [loading, setloading] = useState(false)\n    // get request states\n    const [groups, setGroups] = useState(null);\n    // post request states\n    const [form, setform] = useState({\n        name: \"\",\n        color: \"#ffffff\"\n    });\n    const [notes, setNotes] = useState([]);\n    const [noteForm, setNoteForm] = useState({\n    groupId: \"\",\n    content: \"\"\n  });\n    // choose selcted group\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const selectGroup = (group) => {\n        setSelectedGroup(group);\n    };\n    //all group names\n    const getGroups = async () => {\n            const allGroups = await axios.get(\"http://localhost:4000/api/group\")\n            const data = allGroups.data\n            setGroups(data)\n        }\n        useEffect(() => {\n        getGroups();\n    }, []);\n    //All notes\n    const fetchNotes = useCallback(async () => {\n        if (!selectedGroup || !selectedGroup._id) {\n            setNotes([])\n            return;\n        }\n        setloading(true);\n        setError(null);\n\n        try {\n\n            const response = await axios.get(`http://localhost:4000/api/note/group/${selectedGroup._id}`)\n            const data = response.data\n            setNotes(data)\n        } catch (error) {\n            console.log(\"Error fetching notes\", error);\n            setError(\"Failed to fetch notes\")\n            setNotes([]);\n        } finally {\n            setloading(false)\n        }\n    }, [selectedGroup]);\n\n    useEffect(() => {\n        fetchNotes();\n    }, [fetchNotes]);\n    return (\n        <>\n            <AppDataContext.Provider value={{\n                groups,\n                setGroups,\n                form,\n                setform,\n                notes,\n                setNotes,\n                noteForm,\n                setNoteForm,\n                selectedGroup,\n                setSelectedGroup,\n                getGroups,\n                selectGroup,\n                fetchNotes,\n                loading,\n                error\n            }}>\n                {\n                    children\n                }\n            </AppDataContext.Provider>\n\n        </>\n    )\n}\n\nexport default AppContext"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}